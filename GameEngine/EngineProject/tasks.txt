$ Apply frustrum culling based on bounding box vertices
$ Generate bounding box based on mesh max and min vertices
$ re-scale parents bounding box based on child ones
$ Implement BSP plane logic with single harcoded plane
$ Create basic scene in blender with just 1 obj and 1 plane to understand how to read the bsp plane
- Create bsp planes from planes in obj file scene
- Display on console with objs are being drawn
- Create scene in Blender and extract BSP planes
- Instantiate movable obj

scene.cpp

	for (int i = 0; i < m_entities.size(); i++) { 
		if (is_bsp_plane((Entity*)m_entities[i])) { 
			Plane bsp_plane; 
 
			const char* entityName = ((Entity*)m_entities[i])->GetName(); 
			if (entityName[4] == 'r') { 
				m_camera->AddPlane(bsp_plane.CreatePlaneFromPointAndNormal( 
					((Entity*)m_entities[i])->GetTransform()->GetPosition(), 
					World::right 
				)); 
			} 
			else if (entityName[4] == 'f') { 
				m_camera->AddPlane(bsp_plane.CreatePlaneFromPointAndNormal( 
					((Entity*)m_entities[i])->GetTransform()->GetPosition(), 
					World::foward 
				)); 
			} 
		} 
		else { 
			m_camera->AddEntity((Entity*)m_entities[i]); 

bool Scene::is_bsp_plane(Entity* entity) const { 
	printf("\nEntity name: %s\n", entity->GetName()); 
 
	bool isBspPlane =  
		entity->GetName()[0] == 'b' && 
		entity->GetName()[1] == 's' && 
		entity->GetName()[2] == 'p'; 
	printf("Entity is bsp plane: %d\n", isBspPlane); 
 
	return isBspPlane; 
}